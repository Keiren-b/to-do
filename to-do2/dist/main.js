(()=>{"use strict";var e={802:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(559),r=n.n(o),a=n(476),i=n.n(a)()(r());i.push([e.id,".container {\n    border: solid aqua 1px;\n    padding: 6px\n}\n#displayContainer {\n    display:flex\n}\n\n.test {\n    color: aqua;\n}\n\n.test2 {\n    color: crimson;\n}\n.hidden {\n    display:none\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB;AACJ;AACA;IACI;AACJ;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,cAAc;AAClB;AACA;IACI;AACJ",sourcesContent:[".container {\n    border: solid aqua 1px;\n    padding: 6px\n}\n#displayContainer {\n    display:flex\n}\n\n.test {\n    color: aqua;\n}\n\n.test2 {\n    color: crimson;\n}\n.hidden {\n    display:none\n}\n"],sourceRoot:""}]);const c=i},476:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},559:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},892:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=o.base?l[0]+o.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var f=r(m,o);o.byIndex=c,t.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=o(e,r),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},311:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},60:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},192:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},760:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},865:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(892),t=n.n(e),o=n(760),r=n.n(o),a=n(311),i=n.n(a),c=n(192),l=n.n(c),s=n(60),d=n.n(s),u=n(865),p=n.n(u),m=n(802),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const C=function(){return{bodyContainer:document.getElementById("bodyContainer"),headerContainer:document.getElementById("headerContainer"),displayContainer:document.getElementById("displayContainer"),menuContainer:document.getElementById("menuContainer"),taskContainer:document.getElementById("taskContainer"),title:document.getElementById("title"),titleLabel:document.getElementById("titleLabel"),desc:document.getElementById("desc"),date:document.getElementById("due"),priority:document.getElementById("priority"),notes:document.getElementById("notes"),printBtn:document.getElementById("printBtn"),card:document.getElementById("card"),createProjectBtn:document.getElementById("newProject"),newProjectContainer:document.getElementById("newProjectContainer")}},y=function(e,t,n,o,r){const a=document.createElement(e);a.setAttribute("id",t),a.setAttribute("name",o),a.textContent=n,r.appendChild(a)},v=function(e){let t=e.target.parentElement,n=t.children[0].textContent;localStorage.removeItem(n),t.remove()},h=function(){!function(e){for(;e.firstChild;)e.removeChild(e.lastChild)}(C().taskContainer),C().taskContainer.textContent="this is the task container";for(let e=0;e<localStorage.length;e++){let t=document.createElement("div");t.setAttribute("id","card"),t.style.border="thick solid black";let n=localStorage.key(e),o=localStorage.getItem(n),r=JSON.parse(o);for(let e in r){const n=document.createElement("div");n.textContent=r[e],t.appendChild(n),taskContainer.appendChild(t)}}for(let e=0;e<localStorage.length;e++)y("button","deleteBtn","Delete Task","delete",taskContainer.children[e]),taskContainer.children[e].children[5].addEventListener("click",v)},g=document.createElement("button");function b(e,t,n,o,r){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.notes=r}function A(e){null==localStorage.getItem(e.title)?localStorage.setItem(e.title,JSON.stringify(e)):alert("This Task Already Exists. Choose another name")}C().bodyContainer.appendChild(g),g.textContent="test populate storage",g.addEventListener("click",(function(){for(let e=0;e<11;e++)A(new b(`title ${e}`,`description ${e}`,`due date ${e}`,`priority ${e}`,`notes ${e}`)),console.log(`success ${e}`)}));function E(){C().newProjectContainer.classList.remove("hidden")}(function(){y("label","titleLabel","Title: ","Title",inputContainer),y("input","title","","Title",inputContainer),y("label","descLabel","Description: ","Description",inputContainer),y("textarea","desc","","Description",inputContainer),y("label","dueLabel","","Description",inputContainer),y("input","due","","Due",inputContainer),C().date.type="date",y("label","priorityLabel","Priority: ","Priority",inputContainer),y("select","priority","","Priority",inputContainer);let e=C().priority,t=["Low","Medium","High","Ugent"];for(const o of t){var n=document.createElement("option");n.value=o,n.text=o.charAt(0).toUpperCase()+o.slice(1),e.appendChild(n)}y("label","notesLabel","Notes: ","Notes",inputContainer),y("textarea","notes","","Notes",inputContainer),y("button","printBtn","Add To-Do","printBtn",inputContainer)})(),y("button","newProject","Create New Project","newProject",C().taskContainer),C().createProjectBtn.addEventListener("click",E),y("div","newProjectContainer","","newProjectContainer",C().taskContainer),y("label","newProjectLabel","New Project Title: ","newProjectLabel",C().newProjectContainer),y("input","newProjectTitle","","newProjectTitle",C().newProjectContainer),y("button","addNewProject","Add New Project","addNewProject",C().newProjectContainer),C().newProjectContainer.classList.add("hidden"),document.getElementById("printBtn").addEventListener("click",(function(){A(new b(document.getElementById("title").value,document.getElementById("desc").value,document.getElementById("due").value,document.getElementById("priority").value,document.getElementById("notes").value)),h()}));const I=document.createElement("button");I.textContent="clear",I.addEventListener("click",(function(){localStorage.clear()})),C().bodyContainer.appendChild(I);const B=document.createElement("button");B.textContent="printStorage",C().bodyContainer.appendChild(B),B.addEventListener("click",h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,